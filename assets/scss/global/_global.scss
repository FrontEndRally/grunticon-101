@import 'mixins';
@import 'reset';

//  /*
//     ========================================
//         ::Colors
//     ========================================
//  */

$white: #fff;
$black: #000;

//scss-lint:disable ColorVariable
$colors: (
	body-bg: $white,
	body-copy: $black,
	pulse: rgba($white, 0.5),
	shadow: (
		1: rgba($black, 0.16),
		2: rgba($black, 0.26),
		3: rgba($black, 0.32)
	),
	primary: (
		100: #b2dfbb,
		500: #009688,
		700: #00796b
	),
	accent: (
		100: #ff80ab,
		200: #ff4081,
		400: #f50057
	)
);

@function color($key) {
    @if map-has-key($colors, $key) {
        @return map-get($colors, $key);
    }

    @warn unquote('"Unknown "#{$key}" in $colors."');
    @return null;
}

@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}


//  /*
//     ========================================
//         ::Breakpoint Variables and Mixin
//     ========================================
//  */

$breakpoints: (
    six: em(600px),
    seven-six: em(760px),
    ten: em(1000px)
);

// @include respond-to(small) & @include respond-to(599px, max) are both valid

@mixin respond-to($breakpoint, $minmax:'min') {
    @if map-has-key($breakpoints, $breakpoint) {
        @media screen and (#{$minmax}-width: #{map-get($breakpoints, $breakpoint)}) {
            @content;
        }
    } @else {
        @media screen and (#{$minmax}-width: em($breakpoint)) {
            @content;
        }
    }
}

//  /*
//     ========================================
//         ::Fonts
//     ========================================
//  */

$base-stack: 'Roboto', sans-serif;

$fonts: (
    base: $base-stack
);

@function family($key) {
    @if map-has-key($fonts, $key) {
        @return map-get($fonts, $key);
    }

    @warn unquote('"Unkown "#{$key}" in $fonts."');
    @return null;
}

$weights: (
    regular: 400,
    medium: 500
);

@function fw($key) {
    @if map-has-key($weights, $key) {
        @return map-get($weights, $key);
    }

    @warn unquote('"Unkown "#{$key}" in $weights."');
    @return null;
}

$hover-in: 0.15s ease(in-quart);
$hover-out: 0.2s ease(out-quart);

//  /*
//     ========================================
//         ::Global Styles
//     ========================================
//  */

html {
    box-sizing: border-box;
    font-size: 60%;

    @include respond-to(six) {
        font-size: 61.25%;
    }

    @include respond-to(ten) {
        font-size: 62.5%;
    }
}

*,
*:before,
*:after {
    box-sizing: inherit;
}

body {
    @include font-smoothing;
    background: color(body-bg);
    color: color(body-copy);
    font: normal fw(regular) 1.6rem / 1.65 family(base);
}

.container {
    margin: 0 auto;
    max-width: 1000px;
    padding: 0 1.5rem;

    @include respond-to(ten) {
        padding: 0;
    }
}

.screen-reader-text {
    @include screen-reader-text;
}

.main {
    margin-top: 6.4rem;
    min-height: calc(100vh - 12.8rem);
}

section {
    padding: 2.5rem 0;

    @include respond-to(ten) {
        padding: 5rem 0;
    }

    + section {
        border-top: 1px solid rgba($black, 0.2);
    }
}